{"version":3,"sources":["components/UserItem.jsx","components/UserList.jsx","components/UserAddForm.jsx","components/PostItem.jsx","components/PostList.jsx","App.js","serviceWorker.js","index.js"],"names":["UserItem","props","name","email","salary","photo","isGoldClient","height","src","alt","UserList","listUsers","users","map","user","index","key","className","id","icon","onClick","deleteItem","duration","easing","UserAddForm","state","event","this","setState","target","value","checked","onSubmit","submitAddForm","placeholder","type","required","onChange","updateName","pattern","updateEmail","updateSalary","updatePhoto","htmlFor","updateIsGoldClient","React","Component","PostItem","title","body","PostList","posts","fetch","then","response","json","data","filteredData","filter","post","stareButon","library","add","faTrash","App","background","colorText","message","bind","forEach","console","log","maxId","filteredUsers","preventDefault","prevState","getMaxId","style","color","changeInfo","changeColor","changeColorText","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24d9bdd4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction UserItem(props) {\r\n    const {name, email, salary, photo, isGoldClient} = props;\r\n\r\n    return (\r\n        <div>\r\n            <h3>{ name }</h3>\r\n            <p>{ email }</p>\r\n            <p>{ salary }</p>\r\n           {\r\n               photo \r\n               ? <img height=\"100px\" src={ photo } alt=\"profile_picture\"/>\r\n               : null\r\n           }\r\n            \r\n            { isGoldClient\r\n                ? <h3>Client GOLD</h3>\r\n                : null\r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserItem;","import React from 'react';\r\nimport UserItem from './UserItem';\r\nimport './UserList.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction UserList(props) {\r\n    const {users} = props;\r\n    const listUsers = users.map((user, index) => {\r\n        return <div key={index} className=\"list\">\r\n            <UserItem\r\n            id={ user.id }\r\n            name={ user.name }\r\n            email={ user.email }\r\n            salary={ user.salary }\r\n            photo={ user.photo }\r\n            isGoldClient={ user.isGoldClient }\r\n        />\r\n        <span>\r\n            <FontAwesomeIcon \r\n            className=\"faicons\" \r\n            icon=\"trash\"\r\n            id=\"delete\"\r\n            onClick={() => props.deleteItem(user.id)}>\r\n            </FontAwesomeIcon>\r\n        </span>\r\n        </div>\r\n        \r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h2 id=\"header-user\">Lista utilizatorilor:</h2>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">{listUsers}</FlipMove>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\nimport './UserAddForm.css';\r\n// import {debounce} from 'lodash';\r\n\r\nclass UserAddForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            salary: '',\r\n            photo: '',\r\n            isGoldClient: false\r\n        };\r\n    }\r\n\r\n    updateName(event) {\r\n        this.setState({name: event.target.value});\r\n    }\r\n\r\n    updateEmail(event) {\r\n        // console.log(event.target.value);\r\n        this.setState({email: event.target.value});\r\n    }\r\n\r\n    updateSalary(event) {\r\n        this.setState({salary: event.target.value});\r\n    }\r\n\r\n    updatePhoto(event) {\r\n        this.setState({photo: event.target.value});\r\n    }\r\n\r\n    updateIsGoldClient(event) {\r\n        this.setState({isGoldClient: event.target.checked});\r\n    }\r\n\r\n    render() {\r\n        const {name, email, salary, photo, isGoldClient} = this.state;\r\n\r\n        return (\r\n            <form\r\n                className=\"user-add-form\"\r\n                onSubmit={(event) => this.props.submitAddForm(event, name, email, salary, photo, isGoldClient)}\r\n            >\r\n                <h2>Adauga utilizatori:</h2>\r\n                {/* <label htmlFor=\"name\">Nume:</label> */}\r\n                <input\r\n                    placeholder='Nume'\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    required = {true}\r\n                    onChange={(event) => this.updateName(event)}\r\n                />\r\n                {/* <label htmlFor=\"email\">Email:</label> */}\r\n                <input\r\n                    placeholder='Email'\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    required = {true}\r\n                    pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$\"\r\n                    onChange={(event) => \r\n                        this.updateEmail(event)  \r\n                    }\r\n                />\r\n                {/* <label htmlFor=\"salary\">Salary:</label> */}\r\n                <input\r\n                    placeholder='Salariu'\r\n                    type=\"number\"\r\n                    name=\"salary\"\r\n                    onChange={(event) => this.updateSalary(event)}\r\n                />\r\n                {/* <label htmlFor=\"photo\">Profile:</label> */}\r\n                <input\r\n                    placeholder='URL-ul unei poze care te reprezinta...'\r\n                    type=\"text\"\r\n                    name=\"photo\"\r\n                    onChange={(event) => this.updatePhoto(event)}\r\n                />\r\n                <div id=\"check\">\r\n                    <label htmlFor=\"is-gold-client\" >Client GOLD</label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name=\"is-gold-client\"\r\n                        value=\"true\"\r\n                        onChange={(event) => this.updateIsGoldClient(event)}\r\n                    />\r\n                </div>\r\n                <input id=\"submit\" type=\"submit\" value=\"Introdu utilizatorul\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserAddForm;","import React from 'react'\r\n\r\nfunction PostItem(props) {\r\n    const {title, id, body} = props;\r\n  return (\r\n    <div>\r\n        <h2>{ title }</h2>\r\n        <p>{ id }. { body }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostItem;","import React from 'react';\r\nimport PostItem from './PostItem';\r\nimport './PostList.css'\r\n// import FlipMove from \"react-flip-move\";\r\n\r\nclass PostList extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: []\r\n        };\r\n    }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const filteredData = data.filter(post => post.id < 4);\r\n            this.setState({posts: filteredData});\r\n        });\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.state;\r\n    const { stareButon } = this.props;\r\n      return(\r\n        <div>\r\n            <h2 id=\"header-post\">Lista postarilor:</h2>\r\n            <div className='post-list'>\r\n            { stareButon === 'postari' && posts.map((post, index) => {\r\n                return (<PostItem\r\n                    title = { post.title } \r\n                    id = { post.id }\r\n                    body = { post.body }\r\n                    key = { index }\r\n                />\r\n                );\r\n            })}\r\n            </div>\r\n        </div>\r\n      );\r\n  }\r\n  \r\n}\r\n\r\nexport default PostList;","import React from 'react';\r\nimport UserList from './components/UserList';\r\nimport UserAddForm from './components/UserAddForm';\r\nimport './App.css';\r\nimport PostList from './components/PostList';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faTrash);\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      background: 'white',\r\n      colorText: 'black',\r\n      users: [],\r\n      stareButon: null,\r\n      message: 'default list'\r\n    };\r\n\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        data = data.filter(user => user.id < 4);\r\n        data.forEach(user => {\r\n          user.isGoldClient = false;\r\n        });\r\n        this.setState({users: data});\r\n        console.log({users: data});\r\n      })      \r\n  }\r\n\r\n  changeColor(event) {\r\n    this.setState({background: event.target.value});\r\n  }\r\n\r\n  changeColorText(event) {\r\n    this.setState({colorText: event.target.value});\r\n  }\r\n\r\n  changeInfo(event) {\r\n    console.log('click happened');\r\n    this.setState({stareButon: event.target.value});\r\n    this.setState({message: event.target.value});\r\n  }\r\n\r\n  getMaxId(users) {\r\n    let maxId = 0;\r\n\r\n    users.forEach(user => {\r\n      if (user.id > maxId) {\r\n        maxId = user.id;\r\n      }\r\n    });\r\n\r\n    return maxId;\r\n  }\r\n\r\n  deleteItem(index) {\r\n    const filteredUsers = this.state.users.filter(user => user.id!==index );\r\n    this.setState({\r\n      users:filteredUsers\r\n    });\r\n  }\r\n\r\n  submitAddForm(event, name, email, salary, photo, isGoldClient) {\r\n    event.preventDefault();\r\n    this.setState(prevState => {\r\n      return {\r\n        users: [\r\n          ...prevState.users,\r\n          {\r\n            id: this.getMaxId(prevState.users) + 1,\r\n            name,\r\n            email,\r\n            salary,\r\n            photo,\r\n            isGoldClient\r\n          }\r\n        ]\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"app\" style={{background: this.state.background, color: this.state.colorText}}>\r\n        <h1>Admin panel - Proiectul 1</h1>\r\n        \r\n        <br/>\r\n        <br/>\r\n        <button value=\"useri\" onClick={(event) => this.changeInfo(event)}>Afiseaza useri</button>\r\n        <button value=\"postari\" onClick={(event) => this.changeInfo(event)}>Afiseaza postari</button>\r\n        {\r\n        this.state.stareButon === 'useri' \r\n          ? <div>\r\n            <UserAddForm\r\n            submitAddForm={(event, name, email, salary, photo, isGoldClient) => this.submitAddForm(event, name, email, salary, photo, isGoldClient)}/>\r\n            <UserList users={this.state.users} deleteItem = {this.deleteItem}/>\r\n            </div>\r\n          : this.state.stareButon === 'postari'\r\n            ?\r\n              <PostList stareButon={this.state.stareButon}/>\r\n            : <UserList users={this.state.users} deleteItem = {this.deleteItem}/>\r\n        }\r\n        \r\n        <br/>\r\n        <br/>\r\n        <div id=\"colors\">\r\n          <label htmlFor=\"bg\">Background Color</label>\r\n          <input type=\"color\" name=\"bg\" onChange={(event) => this.changeColor(event)}/>\r\n          <br/>\r\n          <label htmlFor=\"text\">Text Color</label>\r\n          <input type=\"color\" name=\"text\" onChange={(event) => this.changeColorText(event)}/>\r\n          <br/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}